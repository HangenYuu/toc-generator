"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrBody = exports.getPrTitle = exports.getPrBranchName = exports.getPrLink = exports.getCommitEmail = exports.getCommitName = exports.getCommitMessage = void 0;
const moment_1 = __importDefault(require("moment"));
const github_action_helper_1 = require("@technote-space/github-action-helper");
const command_1 = require("./command");
const misc_1 = require("./misc");
const { getBranch } = github_action_helper_1.Utils;
const { isPush } = github_action_helper_1.ContextHelper;
const getCommitMessage = (context) => (0, misc_1.getActionDetail)('commitMessage', context);
exports.getCommitMessage = getCommitMessage;
const getCommitName = (context) => (0, misc_1.getActionDetail)('commitName', context, () => context.actionContext.actor);
exports.getCommitName = getCommitName;
const getCommitEmail = (context) => (0, misc_1.getActionDetail)('commitEmail', context, () => `${context.actionContext.actor}@users.noreply.github.com`);
exports.getCommitEmail = getCommitEmail;
const getVariable = (index, context) => (0, misc_1.getActionDetail)('prVariables', context)[index];
const getPrLink = (context) => context.actionContext.payload.pull_request ? `[${context.actionContext.payload.pull_request.title}](${context.actionContext.payload.pull_request.html_url})` : '';
exports.getPrLink = getPrLink;
const getDate = (index, context) => (0, moment_1.default)().format((0, misc_1.getActionDetail)('prDateFormats', context)[index]);
/**
 * @param {boolean} isComment is comment?
 * @param {GitHelper} helper git helper
 * @param {Octokit} octokit octokit
 * @param {ActionContext} context context
 * @return {Promise<{string, Function}[]>} replacer
 */
const contextVariables = (isComment, helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d;
    const getContext = (branch) => __awaiter(void 0, void 0, void 0, function* () {
        if (isComment) {
            if (branch === (yield (0, command_1.getDefaultBranch)(octokit, context))) {
                return (0, misc_1.getActionContext)(yield (0, misc_1.getPullsArgsForDefaultBranch)(octokit, context), octokit, context);
            }
            return (0, misc_1.getActionContext)(yield (0, command_1.findPR)(branch, octokit, context), octokit, context);
        }
        return context;
    });
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const getPrParamFunc = (extractor) => () => __awaiter(void 0, void 0, void 0, function* () {
        if (!context.actionContext.payload.pull_request) {
            throw new Error('Invalid context.');
        }
        return extractor(yield (0, misc_1.ensureGetPulls)((yield getContext((0, misc_1.getContextBranch)(context))).actionContext.payload.pull_request, octokit, context));
    });
    return [
        { key: 'PR_NUMBER', replace: getPrParamFunc(pr => pr.number) },
        { key: 'PR_NUMBER_REF', replace: getPrParamFunc((pr) => __awaiter(void 0, void 0, void 0, function* () { return pr.number ? `#${pr.number}` : yield (0, misc_1.getDefaultBranchUrl)(octokit, context); })) },
        { key: 'PR_ID', replace: getPrParamFunc(pr => pr.id) },
        { key: 'PR_HEAD_REF', replace: getPrParamFunc(pr => pr.head.ref) },
        { key: 'PR_BASE_REF', replace: getPrParamFunc(pr => pr.base.ref) },
        { key: 'PR_TITLE', replace: getPrParamFunc(pr => pr.title) },
        { key: 'PR_URL', replace: getPrParamFunc(pr => pr.html_url) },
        { key: 'PR_MERGE_REF', replace: getPrParamFunc((pr) => __awaiter(void 0, void 0, void 0, function* () { return pr.number ? `${pr.head.ref} -> ${pr.base.ref}` : yield (0, command_1.getDefaultBranch)(octokit, context); })) },
        { key: 'PR_LINK', replace: () => __awaiter(void 0, void 0, void 0, function* () { return (0, exports.getPrLink)(context); }) },
        { key: 'CURRENT_VERSION', replace: () => __awaiter(void 0, void 0, void 0, function* () { return (0, command_1.getCurrentVersion)(octokit, context); }) },
        { key: 'PATCH_VERSION', replace: () => __awaiter(void 0, void 0, void 0, function* () { return (0, command_1.getNewPatchVersion)(octokit, context); }) },
        { key: 'MINOR_VERSION', replace: () => __awaiter(void 0, void 0, void 0, function* () { return (0, command_1.getNewMinorVersion)(octokit, context); }) },
        { key: 'MAJOR_VERSION', replace: () => __awaiter(void 0, void 0, void 0, function* () { return (0, command_1.getNewMajorVersion)(octokit, context); }) },
        // eslint-disable-next-line no-magic-numbers
    ].concat([...Array((_b = (_a = context.actionDetail.prVariables) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0).keys()].map(index => ({
        // eslint-disable-next-line no-magic-numbers
        key: `VARIABLE${index + 1}`, replace: () => __awaiter(void 0, void 0, void 0, function* () { return getVariable(index, context); }),
        // eslint-disable-next-line no-magic-numbers
    }))).concat([...Array((_d = (_c = context.actionDetail.prDateFormats) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0).keys()].map(index => ({
        // eslint-disable-next-line no-magic-numbers
        key: `DATE${index + 1}`, replace: () => __awaiter(void 0, void 0, void 0, function* () { return getDate(index, context); }),
    })));
});
/**
 * @param {string} string string
 * @param {GitHelper} helper git helper
 * @param {Octokit} octokit octokit
 * @param {ActionDetails} context action details
 * @return {Promise<string>} replaced
 */
const replaceContextVariables = (string, helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return github_action_helper_1.Utils.replaceVariables(string, yield contextVariables(false, helper, octokit, context)); });
const getPrBranchName = (helper, octokit, context, isDuplicateCheck = false) => __awaiter(void 0, void 0, void 0, function* () {
    if (isPush(context.actionContext)) {
        return getBranch(context.actionContext);
    }
    if ((0, misc_1.isActionPr)(context) || (0, misc_1.isNotCreatePR)(context)) {
        return (0, misc_1.getPrHeadRef)(context);
    }
    let prefix, branch;
    if (yield (0, misc_1.isDefaultBranch)(octokit, context)) {
        prefix = (0, misc_1.getPrBranchPrefixForDefaultBranch)(context);
    }
    else {
        prefix = (0, misc_1.getPrBranchPrefix)(context);
    }
    try {
        if (yield (0, misc_1.isDefaultBranch)(octokit, context)) {
            branch = (0, misc_1.getActionDetail)('prBranchNameForDefaultBranch', context, () => (0, misc_1.getActionDetail)('prBranchName', context));
        }
        else {
            branch = (0, misc_1.getActionDetail)('prBranchName', context);
        }
    }
    catch (error) {
        if (isDuplicateCheck && (error instanceof misc_1.ParameterRequiredError)) {
            return `${context.actionContext.runNumber}`;
        }
        throw error;
    }
    return prefix + (yield replaceContextVariables(branch, helper, octokit, context));
});
exports.getPrBranchName = getPrBranchName;
const getPrTitle = (helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    return yield replaceContextVariables(((yield (0, misc_1.isDefaultBranch)(octokit, context)) ?
        (0, misc_1.getActionDetail)('prTitleForDefaultBranch', context, () => (0, misc_1.getActionDetail)('prTitle', context)) :
        (0, misc_1.getActionDetail)('prTitle', context)).trim(), helper, octokit, context);
});
exports.getPrTitle = getPrTitle;
const prBodyVariables = (isComment, files, output, helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    const toCode = (string) => string.length ? ['', '```Shell', string, '```', ''].join('\n') : '';
    return [
        {
            key: 'COMMANDS',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return output.length ? toCode(output.map(item => `$ ${item.command}`).join('\n')) : ''; }),
        },
        {
            key: 'COMMANDS_STDOUT',
            replace: () => __awaiter(void 0, void 0, void 0, function* () {
                return output.length ? '<details>\n' + output.map(item => [
                    `<summary><em>${item.command}</em></summary>`,
                    toCode(item.stdout.join('\n')),
                ].join('\n')).join('\n</details>\n<details>\n') + '\n</details>' : '';
            }),
        },
        {
            key: 'COMMANDS_OUTPUT',
            replace: () => __awaiter(void 0, void 0, void 0, function* () {
                return output.length ? '<details>\n' + output.map(item => [
                    `<summary><em>${item.command}</em></summary>`,
                    toCode(item.stdout.join('\n')),
                    item.stderr.length ? '### stderr:' : '',
                    toCode(item.stderr.join('\n')),
                ].join('\n')).join('\n</details>\n<details>\n') + '\n</details>' : '';
            }),
        },
        {
            key: 'COMMANDS_STDOUT_OPENED',
            replace: () => __awaiter(void 0, void 0, void 0, function* () {
                return output.length ? '<details open>\n' + output.map(item => [
                    `<summary><em>${item.command}</em></summary>`,
                    toCode(item.stdout.join('\n')),
                ].join('\n')).join('\n</details>\n<details open>\n') + '\n</details>' : '';
            }),
        },
        {
            key: 'COMMANDS_STDERR',
            replace: () => __awaiter(void 0, void 0, void 0, function* () {
                return output.length ? '<details>\n' + output.map(item => [
                    `<summary><em>${item.command}</em></summary>`,
                    toCode(item.stderr.join('\n')),
                ].join('\n')).join('\n</details>\n<details>\n') + '\n</details>' : '';
            }),
        },
        {
            key: 'COMMANDS_STDERR_OPENED',
            replace: () => __awaiter(void 0, void 0, void 0, function* () {
                return output.length ? '<details open>\n' + output.map(item => [
                    `<summary><em>${item.command}</em></summary>`,
                    toCode(item.stderr.join('\n')),
                ].join('\n')).join('\n</details>\n<details open>\n') + '\n</details>' : '';
            }),
        },
        {
            key: 'FILES',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return files.map(file => `- ${file}`).join('\n'); }),
        },
        {
            key: 'FILES_SUMMARY',
            // eslint-disable-next-line no-magic-numbers
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return 'Changed ' + (files.length > 1 ? `${files.length} files` : 'file'); }),
        },
        {
            key: 'ACTION_NAME',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return context.actionDetail.actionName; }),
        },
        {
            key: 'ACTION_OWNER',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return context.actionDetail.actionOwner; }),
        },
        {
            key: 'ACTION_REPO',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return context.actionDetail.actionRepo; }),
        },
        {
            key: 'ACTION_URL',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return `https://github.com/${context.actionDetail.actionOwner}/${context.actionDetail.actionRepo}`; }),
        },
        {
            key: 'ACTION_MARKETPLACE_URL',
            replace: () => __awaiter(void 0, void 0, void 0, function* () { return `https://github.com/marketplace/actions/${context.actionDetail.actionRepo}`; }),
        },
    ].concat(yield contextVariables(isComment, helper, octokit, context));
});
const replacePrBodyVariables = (isComment, prBody, files, output, helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return github_action_helper_1.Utils.replaceVariables(prBody, yield prBodyVariables(isComment, files, output, helper, octokit, context)); });
const getPrBody = (isComment, files, output, helper, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    return replacePrBodyVariables(isComment, (isComment ?
        (0, misc_1.getActionDetail)('prBodyForComment', context, () => (0, misc_1.getActionDetail)('prBody', context)) :
        ((yield (0, misc_1.isDefaultBranch)(octokit, context)) ?
            (0, misc_1.getActionDetail)('prBodyForDefaultBranch', context, () => (0, misc_1.getActionDetail)('prBody', context)) :
            (0, misc_1.getActionDetail)('prBody', context))).trim().split(/\r?\n/).map(line => line.replace(/^[\s\t]+/, '')).join('\n'), files, output, helper, octokit, context);
});
exports.getPrBody = getPrBody;
