"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPassedAllChecks = exports.checkSuiteState = exports.getAutoMergeThresholdDays = exports.getTriggerWorkflowMessage = exports.isActiveTriggerWorkflow = exports.getApiToken = exports.isSetApiToken = exports.isCached = exports.getCache = exports.getCacheKey = exports.getActionContext = exports.ensureGetPulls = exports.getPullsArgsForDefaultBranch = exports.getHelper = exports.filterExtension = exports.filterGitStatus = exports.getGitFilterStatus = exports.isTargetContext = exports.isTargetBranch = exports.isNotCreatePR = exports.isClosePR = exports.isDisabledDeletePackage = exports.checkOnlyDefaultBranch = exports.checkDefaultBranch = exports.isDefaultBranch = exports.getContextBranch = exports.isActionPr = exports.getPrBranchPrefixForDefaultBranch = exports.getPrBranchPrefix = exports.getPrBaseRef = exports.getPrHeadRef = exports.getDefaultBranchUrl = exports.replaceDirectory = exports.getActionDetail = exports.ParameterRequiredError = void 0;
const core_1 = require("@actions/core");
const github_action_helper_1 = require("@technote-space/github-action-helper");
const github_action_log_helper_1 = require("@technote-space/github-action-log-helper");
const filter_github_action_1 = require("@technote-space/filter-github-action");
const command_1 = require("./command");
const constant_1 = require("../constant");
const { getWorkspace, getPrefixRegExp, getAccessToken } = github_action_helper_1.Utils;
const { escapeRegExp, replaceAll, getBranch } = github_action_helper_1.Utils;
const { isPr, isCron, isPush, isCustomEvent, isManualEvent, isWorkflowRun } = github_action_helper_1.ContextHelper;
/**
 * ParameterRequiredError
 */
class ParameterRequiredError extends Error {
    /**
     * @param {string} target target
     */
    constructor(target) {
        super(`parameter [${target}] is required.`);
        Object.setPrototypeOf(this, ParameterRequiredError.prototype);
    }
}
exports.ParameterRequiredError = ParameterRequiredError;
const getActionDetail = (key, context, defaultValue) => {
    if (undefined === defaultValue && !(key in context.actionDetail)) {
        throw new ParameterRequiredError(key);
    }
    if (undefined === defaultValue && typeof context.actionDetail[key] === 'string' && context.actionDetail[key].trim() === '') {
        throw new ParameterRequiredError(key);
    }
    return context.actionDetail[key] || (typeof defaultValue === 'function' ? defaultValue() : undefined);
};
exports.getActionDetail = getActionDetail;
const toArray = (item) => Array.isArray(item) ? item : [item];
const replaceDirectory = (message) => {
    const workDir = getWorkspace();
    return replaceAll(replaceAll(message, ` -C ${workDir}`, ''), workDir, '[Working Directory]');
};
exports.replaceDirectory = replaceDirectory;
const getDefaultBranchUrl = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return `https://github.com/${context.actionContext.repo.owner}/${context.actionContext.repo.repo}/tree/${yield (0, command_1.getDefaultBranch)(octokit, context)}`; });
exports.getDefaultBranchUrl = getDefaultBranchUrl;
const getPrHeadRef = (context) => { var _a, _b; return (_b = (_a = context.actionContext.payload.pull_request) === null || _a === void 0 ? void 0 : _a.head.ref) !== null && _b !== void 0 ? _b : ''; };
exports.getPrHeadRef = getPrHeadRef;
const getPrBaseRef = (context) => { var _a, _b; return (_b = (_a = context.actionContext.payload.pull_request) === null || _a === void 0 ? void 0 : _a.base.ref) !== null && _b !== void 0 ? _b : ''; };
exports.getPrBaseRef = getPrBaseRef;
const getPrBranchPrefix = (context) => context.actionDetail.prBranchPrefix || `${context.actionDetail.actionRepo}/`;
exports.getPrBranchPrefix = getPrBranchPrefix;
const getPrBranchPrefixForDefaultBranch = (context) => context.actionDetail.prBranchPrefixForDefaultBranch || (0, exports.getPrBranchPrefix)(context);
exports.getPrBranchPrefixForDefaultBranch = getPrBranchPrefixForDefaultBranch;
const isActionPr = (context) => getPrefixRegExp((0, exports.getPrBranchPrefix)(context)).test((0, exports.getPrHeadRef)(context)) || getPrefixRegExp((0, exports.getPrBranchPrefixForDefaultBranch)(context)).test((0, exports.getPrHeadRef)(context));
exports.isActionPr = isActionPr;
const getContextBranch = (context) => context.isBatchProcess ? (0, exports.getPrBaseRef)(context) : (getBranch(context.actionContext) || (0, exports.getPrHeadRef)(context));
exports.getContextBranch = getContextBranch;
const isDefaultBranch = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return (yield (0, command_1.getDefaultBranch)(octokit, context)) === (0, exports.getContextBranch)(context); });
exports.isDefaultBranch = isDefaultBranch;
const checkDefaultBranch = (context) => { var _a; return (_a = context.actionDetail.checkDefaultBranch) !== null && _a !== void 0 ? _a : true; };
exports.checkDefaultBranch = checkDefaultBranch;
const checkOnlyDefaultBranch = (context) => { var _a; return (_a = context.actionDetail.checkOnlyDefaultBranch) !== null && _a !== void 0 ? _a : false; };
exports.checkOnlyDefaultBranch = checkOnlyDefaultBranch;
const isDisabledDeletePackage = (context) => { var _a; return !((_a = context.actionDetail.deletePackage) !== null && _a !== void 0 ? _a : false); };
exports.isDisabledDeletePackage = isDisabledDeletePackage;
const isClosePR = (context) => isPr(context.actionContext) && context.actionContext.payload.action === 'closed';
exports.isClosePR = isClosePR;
const isNotCreatePR = (context) => true === context.actionDetail.notCreatePr;
exports.isNotCreatePR = isNotCreatePR;
const isTargetBranch = (branchName, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    if (branchName === (yield (0, command_1.getDefaultBranch)(octokit, context))) {
        return (0, exports.checkDefaultBranch)(context);
    }
    const prefix = toArray((0, exports.getActionDetail)('targetBranchPrefix', context, () => []));
    if (prefix.length) {
        return prefix.some(prefix => getPrefixRegExp(prefix).test(branchName));
    }
    return !(0, exports.checkOnlyDefaultBranch)(context);
});
exports.isTargetBranch = isTargetBranch;
const isTargetContext = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    if (!(0, filter_github_action_1.isTargetEvent)((_a = context.actionDetail.targetEvents) !== null && _a !== void 0 ? _a : constant_1.DEFAULT_TARGET_EVENTS, context.actionContext)) {
        return false;
    }
    if (isCron(context.actionContext) || isCustomEvent(context.actionContext) || isManualEvent(context.actionContext) || isWorkflowRun(context.actionContext)) {
        return true;
    }
    if (isPush(context.actionContext)) {
        return (0, exports.isTargetBranch)(getBranch(context.actionContext), octokit, context);
    }
    if ((0, exports.isActionPr)(context)) {
        return true;
    }
    if ((0, exports.isClosePR)(context)) {
        return true;
    }
    if (!(yield (0, exports.isTargetBranch)((0, exports.getPrHeadRef)(context), octokit, context))) {
        return false;
    }
    return (0, filter_github_action_1.isTargetLabels)(toArray((0, exports.getActionDetail)('includeLabels', context, () => [])), [], context.actionContext);
});
exports.isTargetContext = isTargetContext;
const getGitFilterStatus = (context) => context.actionDetail.filterGitStatus;
exports.getGitFilterStatus = getGitFilterStatus;
const filterGitStatus = (line, context) => {
    const filter = (0, exports.getGitFilterStatus)(context);
    if (filter) {
        const targets = filter.toUpperCase().replace(/[^MDA]/g, '');
        if (!targets) {
            throw new Error('Invalid input [FILTER_GIT_STATUS].');
        }
        // language=JSRegexp
        return (new RegExp(`^[${targets}]\\s+`)).test(line);
    }
    return true;
};
exports.filterGitStatus = filterGitStatus;
const filterExtension = (line, context) => {
    const extensions = toArray((0, exports.getActionDetail)('filterExtensions', context, () => []));
    if (extensions.length) {
        const pattern = '(' + extensions.map(item => escapeRegExp('.' + item.replace(/^\./, ''))).join('|') + ')';
        return (new RegExp(`${pattern}$`)).test(line);
    }
    return true;
};
exports.filterExtension = filterExtension;
const getHelper = (context) => new github_action_helper_1.GitHelper(new github_action_log_helper_1.Logger(exports.replaceDirectory), {
    depth: -1,
    filter: (line) => (0, exports.filterGitStatus)(line, context) && (0, exports.filterExtension)(line, context),
});
exports.getHelper = getHelper;
const getPullsArgsForDefaultBranch = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    return ({
        number: 0,
        id: 0,
        head: {
            ref: yield (0, command_1.getDefaultBranch)(octokit, context),
            user: {
                login: context.actionContext.repo.owner,
            },
        },
        base: {
            repo: {
                name: context.actionContext.repo.repo,
                owner: {
                    login: context.actionContext.repo.owner,
                },
            },
            ref: yield (0, command_1.getDefaultBranch)(octokit, context),
        },
        title: 'default branch',
        'html_url': yield (0, exports.getDefaultBranchUrl)(octokit, context),
    });
});
exports.getPullsArgsForDefaultBranch = getPullsArgsForDefaultBranch;
const ensureGetPulls = (pull, octokit, context) => __awaiter(void 0, void 0, void 0, function* () { return pull !== null && pull !== void 0 ? pull : yield (0, exports.getPullsArgsForDefaultBranch)(octokit, context); });
exports.ensureGetPulls = ensureGetPulls;
const getActionContext = (pull, octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    const _pull = yield (0, exports.ensureGetPulls)(pull, octokit, context);
    return Object.assign(Object.assign({}, context), { actionContext: Object.assign({}, context.actionContext, {
            payload: {
                number: _pull.number,
                'pull_request': {
                    number: _pull.number,
                    id: _pull.id,
                    head: _pull.head,
                    base: _pull.base,
                    title: _pull.title,
                    'html_url': _pull.html_url,
                },
            },
            repo: {
                owner: _pull.base.repo.owner.login,
                repo: _pull.base.repo.name,
            },
            ref: `refs/heads/${_pull.head.ref}`,
        }), isBatchProcess: !!_pull.number });
});
exports.getActionContext = getActionContext;
const getCacheKey = (method, args = {}) => method + JSON.stringify(args);
exports.getCacheKey = getCacheKey;
const getCache = (key, generator, context) => __awaiter(void 0, void 0, void 0, function* () {
    if (!(key in context.cache)) {
        // eslint-disable-next-line require-atomic-updates
        context.cache[key] = yield generator();
    }
    return context.cache[key];
});
exports.getCache = getCache;
const isCached = (key, context) => key in context.cache;
exports.isCached = isCached;
const isSetApiToken = () => !!(0, core_1.getInput)('API_TOKEN');
exports.isSetApiToken = isSetApiToken;
const getApiToken = () => (0, core_1.getInput)('API_TOKEN') || getAccessToken(true);
exports.getApiToken = getApiToken;
const isActiveTriggerWorkflow = (context) => (0, exports.isSetApiToken)() && '' !== context.actionDetail.triggerWorkflowMessage;
exports.isActiveTriggerWorkflow = isActiveTriggerWorkflow;
const getTriggerWorkflowMessage = (context) => { var _a; return (_a = context.actionDetail.triggerWorkflowMessage) !== null && _a !== void 0 ? _a : constant_1.DEFAULT_TRIGGER_WORKFLOW_MESSAGE; };
exports.getTriggerWorkflowMessage = getTriggerWorkflowMessage;
// eslint-disable-next-line no-magic-numbers
const getAutoMergeThresholdDays = (context) => context.actionDetail.autoMergeThresholdDays && /^\d+$/.test(context.actionDetail.autoMergeThresholdDays) ? Number(context.actionDetail.autoMergeThresholdDays) : -1;
exports.getAutoMergeThresholdDays = getAutoMergeThresholdDays;
const checkSuiteState = (checkSuiteId) => (suite) => {
    if (suite.conclusion === 'success') {
        return false;
    }
    if (suite.status !== 'in_progress' || suite.app.slug !== 'github-actions') {
        return true;
    }
    return suite.id !== checkSuiteId;
};
exports.checkSuiteState = checkSuiteState;
const isPassedAllChecks = (octokit, context) => __awaiter(void 0, void 0, void 0, function* () {
    const { data: status } = yield octokit.rest.repos.getCombinedStatusForRef(Object.assign(Object.assign({}, context.actionContext.repo), { ref: context.actionContext.sha }));
    if ('success' !== status.state) {
        return false;
    }
    const checkSuiteUrl = (yield octokit.rest.actions.getWorkflowRun(Object.assign(Object.assign({}, context.actionContext.repo), { 'run_id': Number(process.env.GITHUB_RUN_ID) }))).data['check_suite_url'];
    const checkSuiteId = Number(checkSuiteUrl.replace(/^.+\/(\d+)$/, '$1'));
    return !(yield octokit.paginate(octokit.rest.checks.listSuitesForRef.endpoint.merge(Object.assign(Object.assign({}, context.actionContext.repo), { ref: context.actionContext.sha })))).filter(suite => (0, exports.checkSuiteState)(checkSuiteId)(suite)).length;
});
exports.isPassedAllChecks = isPassedAllChecks;
