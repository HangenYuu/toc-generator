import type { ActionContext, CommandOutput, Null } from '../types';
import type { components } from '@octokit/openapi-types';
import type { Types } from '@technote-space/github-action-helper';
import type { GitHelper } from '@technote-space/github-action-helper';
import type { Logger } from '@technote-space/github-action-log-helper';
import { ApiHelper } from '@technote-space/github-action-helper';
declare type PullsListResponseData = components['schemas']['pull-request-simple'];
export declare const getApiHelper: (octokit: Types.Octokit, context: ActionContext, logger?: Logger | undefined) => ApiHelper;
export declare const userConfig: (helper: GitHelper, context: ActionContext) => Promise<void>;
export declare const branchConfig: (helper: GitHelper, octokit: Types.Octokit, context: ActionContext) => Promise<void>;
export declare const clone: (helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<void>;
export declare const checkBranch: (helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<boolean>;
export declare const getDiff: (helper: GitHelper, logger: Logger) => Promise<string[]>;
export declare const getRefDiff: (compare: string, helper: GitHelper, logger: Logger, context: ActionContext) => Promise<string[]>;
export declare const merge: (branch: string, helper: GitHelper, logger: Logger, context: ActionContext) => Promise<boolean>;
export declare const abortMerge: (helper: GitHelper, logger: Logger) => Promise<void>;
export declare const commit: (helper: GitHelper, logger: Logger, context: ActionContext) => Promise<void>;
export declare const push: (branchName: string, helper: GitHelper, logger: Logger, context: ActionContext) => Promise<void>;
export declare const isMergeable: (number: number, octokit: Types.Octokit, context: ActionContext) => Promise<boolean>;
export declare const afterCreatePr: (branchName: string, number: number, helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<void>;
export declare const updatePr: (branchName: string, files: string[], output: CommandOutput[], helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<boolean>;
export declare const getChangedFiles: (helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<{
    files: string[];
    output: CommandOutput[];
    aborted?: boolean;
}>;
export declare const getChangedFilesForRebase: (helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<{
    files: string[];
    output: CommandOutput[];
}>;
export declare const closePR: (branchName: string, logger: Logger, context: ActionContext, message?: string | undefined) => Promise<void>;
export declare const resolveConflicts: (branchName: string, helper: GitHelper, logger: Logger, octokit: Types.Octokit, context: ActionContext) => Promise<string>;
export declare const getDefaultBranch: (octokit: Types.Octokit, context: ActionContext) => Promise<string>;
export declare const getCurrentVersion: (octokit: Types.Octokit, context: ActionContext) => Promise<string>;
export declare const getNewPatchVersion: (octokit: Types.Octokit, context: ActionContext) => Promise<string>;
export declare const getNewMinorVersion: (octokit: Types.Octokit, context: ActionContext) => Promise<string>;
export declare const getNewMajorVersion: (octokit: Types.Octokit, context: ActionContext) => Promise<string>;
export declare const findPR: (branchName: string, octokit: Types.Octokit, context: ActionContext) => Promise<PullsListResponseData | Null>;
export {};
